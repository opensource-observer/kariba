/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4ZGquwTsYbHEmYTQjLVG82
// Component: 5CUlIYp5tQb0

import * as React from "react";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName,
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions,
} from "@plasmicapp/react-web/lib/host";

import Card from "../../Card"; // plasmic-import: 35ZouyTENkJc/component
import Button from "../../Button"; // plasmic-import: DN2OfxkKwMtl/component
import { Iframe } from "@plasmicpkgs/plasmic-basic-components";

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: 4ZGquwTsYbHEmYTQjLVG82/projectcss
import sty from "./PlasmicOverview.module.css"; // plasmic-import: 5CUlIYp5tQb0/css

import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: 2OoIjXE4Dfc7/icon
import IdeaSvgrepoComSvgIcon from "./icons/PlasmicIcon__IdeaSvgrepoComSvg"; // plasmic-import: UQgl515eAxHa/icon

createPlasmicElementProxy;

export type PlasmicOverview__VariantMembers = {
  theme: "dark";
};
export type PlasmicOverview__VariantsArgs = {
  theme?: SingleChoiceArg<"dark">;
};
type VariantPropType = keyof PlasmicOverview__VariantsArgs;
export const PlasmicOverview__VariantProps = new Array<VariantPropType>(
  "theme",
);

export type PlasmicOverview__ArgsType = {};
type ArgPropType = keyof PlasmicOverview__ArgsType;
export const PlasmicOverview__ArgProps = new Array<ArgPropType>();

export type PlasmicOverview__OverridesType = {
  root?: Flex__<"div">;
  section?: Flex__<"section">;
  button?: Flex__<typeof Button>;
  code?: Flex__<"code">;
  iframe?: Flex__<typeof Iframe>;
};

export interface DefaultOverviewProps {
  theme?: SingleChoiceArg<"dark">;
  className?: string;
}

const $$ = {};

function PlasmicOverview__RenderFunc(props: {
  variants: PlasmicOverview__VariantsArgs;
  args: PlasmicOverview__ArgsType;
  overrides: PlasmicOverview__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined),
        ),
      ),
    [props.args],
  );

  const $props = {
    ...args,
    ...variants,
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "theme",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.theme,
      },
    ],
    [$props, $ctx, $refs],
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs,
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root,
        { [sty.roottheme_dark]: hasVariant($state, "theme", "dark") },
      )}
    >
      <section
        data-plasmic-name={"section"}
        data-plasmic-override={overrides.section}
        className={classNames(projectcss.all, sty.section, {
          [sty.sectiontheme_dark]: hasVariant($state, "theme", "dark"),
        })}
      >
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__acfJ7)}
        >
          <Card
            className={classNames("__wab_instance", sty.card__mk2Sd, {
              [sty.cardtheme_dark__mk2SDj7Ma]: hasVariant(
                $state,
                "theme",
                "dark",
              ),
            })}
            theme={hasVariant($state, "theme", "dark") ? "dark" : undefined}
            title={
              <div
                className={classNames(projectcss.all, sty.freeBox__znPhl, {
                  [sty.freeBoxtheme_dark__znPhlj7Ma]: hasVariant(
                    $state,
                    "theme",
                    "dark",
                  ),
                })}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__lbDpt,
                    {
                      [sty.texttheme_dark__lbDptj7Ma]: hasVariant(
                        $state,
                        "theme",
                        "dark",
                      ),
                    },
                  )}
                >
                  {"New to the Kariba community?"}
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__moNo0,
                  )}
                >
                  {
                    "The getting started guide covers joining the data collective and making your first contribution."
                  }
                </div>
              </div>
            }
          >
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__viAcn, {
                [sty.freeBoxtheme_dark__viAcNj7Ma]: hasVariant(
                  $state,
                  "theme",
                  "dark",
                ),
              })}
            >
              <Button
                data-plasmic-name={"button"}
                data-plasmic-override={overrides.button}
                className={classNames("__wab_instance", sty.button, {
                  [sty.buttontheme_dark]: hasVariant($state, "theme", "dark"),
                })}
                color={hasVariant($state, "theme", "dark") ? "blue" : "blue"}
                link={"/docs/get-started/"}
                showEndIcon={true}
                startIcon={
                  <IconIcon
                    className={classNames(projectcss.all, sty.svg__tkhd3)}
                    role={"img"}
                  />
                }
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__wtRZq,
                    {
                      [sty.texttheme_dark__wtRZqj7Ma]: hasVariant(
                        $state,
                        "theme",
                        "dark",
                      ),
                    },
                  )}
                >
                  {"Get started"}
                </div>
              </Button>
            </Stack__>
          </Card>
          <Card
            className={classNames("__wab_instance", sty.card__vrT1, {
              [sty.cardtheme_dark__vrT1J7Ma]: hasVariant(
                $state,
                "theme",
                "dark",
              ),
            })}
            noTitle={true}
            theme={hasVariant($state, "theme", "dark") ? "dark" : undefined}
            title={null}
          >
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__up2WU, {
                [sty.freeBoxtheme_dark__up2WUj7Ma]: hasVariant(
                  $state,
                  "theme",
                  "dark",
                ),
              })}
            >
              <IdeaSvgrepoComSvgIcon
                className={classNames(projectcss.all, sty.svg__qaC4M, {
                  [sty.svgtheme_dark__qaC4Mj7Ma]: hasVariant(
                    $state,
                    "theme",
                    "dark",
                  ),
                })}
                role={"img"}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___8F4Zh,
                  {
                    [sty.texttheme_dark___8F4Zhj7Ma]: hasVariant(
                      $state,
                      "theme",
                      "dark",
                    ),
                  },
                )}
              >
                <React.Fragment>
                  <span
                    className={"plasmic_default__all plasmic_default__span"}
                    style={{ fontWeight: 700 }}
                  >
                    {"Tip:"}
                  </span>
                  <React.Fragment>{" Open search with "}</React.Fragment>
                  {
                    <code
                      data-plasmic-name={"code"}
                      data-plasmic-override={overrides.code}
                      className={classNames(
                        projectcss.all,
                        projectcss.code,
                        projectcss.__wab_text,
                        projectcss.plasmic_default__inline,
                        sty.code,
                        {
                          [sty.codetheme_dark]: hasVariant(
                            $state,
                            "theme",
                            "dark",
                          ),
                        },
                      )}
                    >
                      <React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ fontWeight: 700 }}
                        >
                          {"/"}
                        </span>
                      </React.Fragment>
                    </code>
                  }
                  <React.Fragment> </React.Fragment>
                </React.Fragment>
              </div>
            </Stack__>
          </Card>
          <Card
            className={classNames("__wab_instance", sty.card__wwB2O, {
              [sty.cardtheme_dark__wwB2Oj7Ma]: hasVariant(
                $state,
                "theme",
                "dark",
              ),
            })}
            noTitle={true}
            title={null}
          >
            <div className={classNames(projectcss.all, sty.freeBox___2GgvN)}>
              <Iframe
                data-plasmic-name={"iframe"}
                data-plasmic-override={overrides.iframe}
                className={classNames("__wab_instance", sty.iframe, {
                  [sty.iframetheme_dark]: hasVariant($state, "theme", "dark"),
                })}
                preview={false}
                src={"https://kariba.substack.com/embed"}
                srcDoc={"<div><h3>Heading</h3><p>Example text...</p></div>"}
                useHtml={false}
              />
            </div>
          </Card>
        </Stack__>
      </section>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "section", "button", "code", "iframe"],
  section: ["section", "button", "code", "iframe"],
  button: ["button"],
  code: ["code"],
  iframe: ["iframe"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  section: "section";
  button: typeof Button;
  code: "code";
  iframe: typeof Iframe;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicOverview__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicOverview__VariantsArgs;
    args?: PlasmicOverview__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicOverview__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicOverview__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>,
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicOverview__ArgProps,
          internalVariantPropNames: PlasmicOverview__VariantProps,
        }),
      [props, nodeName],
    );
    return PlasmicOverview__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicOverview";
  } else {
    func.displayName = `PlasmicOverview.${nodeName}`;
  }
  return func;
}

export const PlasmicOverview = Object.assign(
  // Top-level PlasmicOverview renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    section: makeNodeComponent("section"),
    button: makeNodeComponent("button"),
    code: makeNodeComponent("code"),
    iframe: makeNodeComponent("iframe"),

    // Metadata about props expected for PlasmicOverview
    internalVariantProps: PlasmicOverview__VariantProps,
    internalArgProps: PlasmicOverview__ArgProps,
  },
);

export default PlasmicOverview;
/* prettier-ignore-end */
